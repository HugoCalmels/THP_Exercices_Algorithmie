// setup : read + convertions + welcome 
const fs = require('fs');
const fileName = process.argv[2];

const data = fs.readFileSync(fileName, 'utf8').split(" ");
let result = data.map(i=>Number(i));
console.log("Vous avez choisi la array :")
console.log(result)
console.log("")

// 1 bubble sort 
let bubbleResult = result.slice();
const bubbleSort = (arr) => {
  const len = arr.length;
  let count = 0;
  for (let i = 0; i < len ; i ++) {
    for (let j = 0; j < len ; j++) {
      if (arr[j] > arr[j + 1]) {
        // swap
        const temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
        count ++;
      }
    }
  }
  return {
    bubbleComparisonCount: count,
    bubbleArr: arr
  }
}
const { bubbleComparisonCount, bubbleArr} = bubbleSort(bubbleResult)
console.log(`Tri à bulle: ${bubbleComparisonCount} comparaisons - [${bubbleArr}]`)


// *****************************************//
console.log('******************************************')

// 2 insertion sort
let insertionResult = result.slice();
const insertionSort = arr => {
  let count = 0
  
  for(let i = 1; i < arr.length; i++) {
    let curr = arr[i];
    let j = i - 1;
    

    while (j >= 0 && arr[j] > curr) {
      arr[j + 1] = arr[j];
      j--;
      
    }   
    count ++;
    arr[j + 1] = curr;
  }
  return {
    insertionComparisonCount: count,
    insertionArr: arr
  }
}
  const { insertionComparisonCount, insertionArr} = insertionSort(insertionResult)
  console.log(`Tri à insertion: ${insertionComparisonCount} comparaisons - [${insertionArr}]`)

// *****************************************//
console.log('******************************************')

// 3 selection sort
let selectionResult = result.slice();
const selectionSort = arr =>  {
  const len = arr.length;
  let count = 0;

  for (let i = 0; i < len; i++) {
    let idxOfMin = i;

    for (let j = i + 1; j < len ; j++) {
      if (arr[j] < arr[idxOfMin]) idxOfMin = j;
      count ++;
    }
    if (idxOfMin !== i) {
      // swap 
      const temp = arr[idxOfMin];
      arr[idxOfMin] = arr[i];
      arr[i] = temp
    }
  }
  return {
    selectionComparisonCount: count,
    selectionArr: arr
  }
}
const { selectionComparisonCount, selectionArr} = selectionSort(selectionResult)
console.log(`Tri à sélection: ${selectionComparisonCount} comparaisons - [${selectionArr}]`)

// *****************************************//
console.log('******************************************')

// 4 quick sort
var items = result.slice();
function swap(items, leftIndex, rightIndex){
    var temp = items[leftIndex];
    items[leftIndex] = items[rightIndex];
    items[rightIndex] = temp;
}
function partition(items, left, right, count) {

    var pivot   = items[Math.floor((right + left) / 2)], //middle element
        i       = left, //left pointer
        j       = right; //right pointer
       
    while (i <= j) {
   
        while (items[i] < pivot) {
            i++;
      
            
        }
        while (items[j] > pivot) {
            j--;  

        } 
        if (i <= j)    {
            swap(items, i, j); //sawpping two elements
            i++;
            j--;    
               
        }   
    }

    return i;
}

function quickSort(items, left, right) {
    var index;
    if (items.length > 1) {
        index = partition(items, left, right); //index returned from partition
        if (left < index - 1) { //more elements on the left side of the pivot
            quickSort(items, left, index - 1);
        }
        if (index < right) { //more elements on the right side of the pivot
            quickSort(items, index, right);
        }
    }
    return items;
}
// first call to quick sort
var quickSortResult = quickSort(items, 0, items.length - 1);
console.log(`Tri rapide: undefined comparaisons - [${quickSortResult}]`)

// *****************************************//
console.log('******************************************')

// 5 merge sort
function mergeSortTopDown(arr) {
  if(arr.length <= 1) {
    return arr
  }

  const middle = Math.floor(arr.length / 2);
  const left = arr.slice(0, middle)
  const right = arr.slice(middle)

  return mergeTopDown(mergeSortTopDown(left), mergeSortTopDown(right));
}

function mergeTopDown(left, right) {
  const arr = [];

  while(left.length && right.length) {
    if(left[0] < right[0]) {
      arr.push(left.shift())
    } else {
      arr.push(right.shift())
    }
    
  }
  return arr.concat(left.slice()).concat(right.slice());
}


console.log(`Tri merge: undefined comparaisons - [${mergeSortTopDown(result)}]`)
